jwtSecret = "secret";

EMAIL_USER=minhaj2001.csecu@gmail.com
EMAIL_PASS=mjkezvygxjgyvzoy


# style={{ wordBreak: "break-word", whiteSpace: "normal", maxWidth: "200px" }}
#       style={{ 
#       wordBreak: "break-word", 
#       whiteSpace: "normal", 
#       maxWidth: "100%" // Wraps based on modal width
#       }}


# // import React, { useState, useEffect } from "react";
# // import { Table, Button, Modal, Form } from "react-bootstrap";
# // import { PDFDocument, rgb } from "pdf-lib";
# // import { saveAs } from "file-saver";

# // const ShareProject = () => {
# //   const [projects, setProjects] = useState([]);
# //   const [selectedProject, setSelectedProject] = useState(null);
# //   const [stages, setStages] = useState([]);
# //   const [statusFilter, setStatusFilter] = useState("All");
# //   const [showDetailsModal, setShowDetailsModal] = useState(false);
# //   const [email, setEmail] = useState("");

# //   useEffect(() => {
# //     fetchProjects();
# //   }, []);

# //   // Fetch all projects
# //   const fetchProjects = async () => {
# //     try {
# //       const res = await fetch("http://localhost:5000/projects/all-projects");
# //       const data = await res.json();
# //       setProjects(data);
# //     } catch (err) {
# //       console.error("Error fetching projects:", err);
# //     }
# //   };

# //   // Fetch project details and stages
# //   const handleProjectClick = async (project) => {
# //     setSelectedProject(project);
# //     try {
# //       const res = await fetch(`http://localhost:5000/projects/${project.project_id}/stages`);
# //       const data = await res.json();
# //       setStages(data);
# //     } catch (err) {
# //       console.error("Error fetching project stages:", err);
# //     }
# //     setShowDetailsModal(true);
# //   };

# //   // Generate PDF in the frontend
# //   const generatePDF = async () => {
# //     if (!selectedProject) return;

# //     const pdfDoc = await PDFDocument.create();
# //     const page = pdfDoc.addPage([600, 800]); // A4 size
# //     const { width, height } = page.getSize();
# //     const fontSize = 14;

# //     page.drawText(`Project: ${selectedProject.project_name}`, { x: 50, y: height - 50, size: 20, color: rgb(0, 0, 1) });
# //     page.drawText(`Description: ${selectedProject.description}`, { x: 50, y: height - 80, size: fontSize });

# //     let yPos = height - 120;
# //     page.drawText("Stages:", { x: 50, y: yPos, size: 16, color: rgb(1, 0, 0) });

# //     stages.forEach((stage, index) => {
# //       yPos -= 30;
# //       page.drawText(`${index + 1}. ${stage.stage_name}`, { x: 50, y: yPos, size: fontSize });
# //       page.drawText(`Start Date: ${stage.start_date || "N/A"}`, { x: 200, y: yPos, size: fontSize });
# //       page.drawText(`End Date: ${stage.end_date || "N/A"}`, { x: 350, y: yPos, size: fontSize });
# //       page.drawText(`Status: ${stage.status}`, { x: 500, y: yPos, size: fontSize });
# //     });

# //     const pdfBytes = await pdfDoc.save();
# //     return new Blob([pdfBytes], { type: "application/pdf" });
# //   };

# //   // Send PDF to backend for emailing
# //   const handleSendEmail = async () => {
# //     if (!email) {
# //       alert("Please enter an email address!");
# //       return;
# //     }

# //     const pdfBlob = await generatePDF();
# //     if (!pdfBlob) return;

# //     const formData = new FormData();
# //     formData.append("email", email);
# //     formData.append("pdf", pdfBlob, `project_${selectedProject.project_id}.pdf`);

# //     try {
# //       const res = await fetch("http://localhost:5000/projects/send-email", {
# //         method: "POST",
# //         body: formData,
# //       });

# //       const data = await res.json();
# //       if (data.success) {
# //         alert("Email sent successfully!");
# //       } else {
# //         alert("Failed to send email.");
# //       }
# //     } catch (err) {
# //       console.error("Error sending email:", err);
# //     }
# //   };

# //   return (
# //     <div className="container mt-4">
# //       <h3 className="text-center mb-3">Project List</h3>

# //       {/* Status Filter Dropdown */}
# //       <Form.Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} className="mb-3">
# //         <option value="All">All</option>
# //         <option value="Pending">Pending</option>
# //         <option value="Ongoing">Ongoing</option>
# //         <option value="Completed">Completed</option>
# //       </Form.Select>

# //       {/* Projects Table */}
# //       <Table bordered striped hover className="text-center">
# //         <thead className="table-dark">
# //           <tr>
# //             <th>#</th>
# //             <th>Project Name</th>
# //             <th>Created Date</th>
# //             <th>Status</th>
# //           </tr>
# //         </thead>
# //         <tbody>
# //           {projects
# //             .filter((proj) => statusFilter === "All" || proj.status === statusFilter)
# //             .map((project, index) => (
# //               <tr key={project.project_id} onClick={() => handleProjectClick(project)} style={{ cursor: "pointer" }}>
# //                 <td>{index + 1}</td>
# //                 <td>{project.project_name}</td>
# //                 <td>{new Date(project.created_at).toLocaleDateString()}</td>
# //                 <td>{project.status}</td>
# //               </tr>
# //             ))}
# //         </tbody>
# //       </Table>

# //       {/* Project Details Modal */}
# //       <Modal show={showDetailsModal} onHide={() => setShowDetailsModal(false)}>
# //         <Modal.Header closeButton>
# //           <Modal.Title>{selectedProject?.project_name}</Modal.Title>
# //         </Modal.Header>
# //         <Modal.Body>
# //           <p><strong>Description:</strong> {selectedProject?.description}</p>
# //           <Table bordered striped>
# //             <thead>
# //               <tr>
# //                 <th>#</th>
# //                 <th>Stage Name</th>
# //                 <th>Start Date</th>
# //                 <th>End Date</th>
# //                 <th>Status</th>
# //               </tr>
# //             </thead>
# //             <tbody>
# //               {stages.map((stage, index) => (
# //                 <tr key={stage.stage_id}>
# //                   <td>{index + 1}</td>
# //                   <td>{stage.stage_name}</td>
# //                   <td>{stage.start_date || "N/A"}</td>
# //                   <td>{stage.end_date || "N/A"}</td>
# //                   <td>{stage.status}</td>
# //                 </tr>
# //               ))}
# //             </tbody>
# //           </Table>
# //         </Modal.Body>
# //         <Modal.Footer>
# //           <Form.Control type="email" placeholder="Enter recipient's email" value={email} onChange={(e) => setEmail(e.target.value)} />
# //           <Button variant="primary" onClick={handleSendEmail}>Send PDF via Email</Button>
# //         </Modal.Footer>
# //       </Modal>
# //     </div>
# //   );
# // };

# // export default ShareProject;














# import React, { useState, useEffect } from "react";
# import { Table, Button, Modal, Form } from "react-bootstrap";
# import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';

# const ShareProject = () => {
#   const [projects, setProjects] = useState([]);
#   const [selectedProject, setSelectedProject] = useState(null);
#   const [stages, setStages] = useState([]);
#   const [statusFilter, setStatusFilter] = useState("All");
#   const [showDetailsModal, setShowDetailsModal] = useState(false);
#   const [pdfUrl, setPdfUrl] = useState(null);
#   const [emails, setEmails] = useState([]);
#   const [selectedEmails, setSelectedEmails] = useState([]);

#   useEffect(() => {
#     fetchProjects();
#     fetchEmails();
#   }, []);

#   const fetchProjects = async () => {
#     try {
#       const res = await fetch("http://localhost:5000/projects/all-projects");
#       const data = await res.json();
#       setProjects(data);
#     } catch (err) {
#       console.error("Error fetching projects:", err);
#     }
#   };

#   const fetchEmails = async () => {
#     try {
#       const res = await fetch("http://localhost:5000/projects/emails/all-emails");
#       const data = await res.json();
#       setEmails(data);
#     } catch (err) {
#       console.error("Error fetching emails:", err);
#     }
#   };

#   const handleProjectClick = async (project) => {
#     setSelectedProject(project);
#     try {
#       const res = await fetch(`http://localhost:5000/projects/${project.project_id}/stages`);
#       const data = await res.json();
#       setStages(data);
#     } catch (err) {
#       console.error("Error fetching project stages:", err);
#     }
#     setShowDetailsModal(true);
#     setPdfUrl(null);
#   };

#   const handleEmailSelect = (email) => {
#     setSelectedEmails((prev) => {
#       const updatedEmails = prev.includes(email) 
#         ? prev.filter((e) => e !== email) 
#         : [...prev, email];
  
#       console.log("Updated Emails:", updatedEmails); // âœ… This will now log the correct array
#       return updatedEmails;
#     });
#   };
  
  
  

#   const generatePDF = async () => {
#     if (!selectedProject) return;

#     const pdfDoc = await PDFDocument.create();
#     const page = pdfDoc.addPage([600, 800]);
#     const { height } = page.getSize();
#     let yPos = height - 50;
#     const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

#     page.drawText(`Project: ${selectedProject.project_name}`, {
#       x: 50, y: yPos, size: 18, font, color: rgb(0.1, 0.3, 0.7),
#     });

#     yPos -= 25;
#     page.drawText(`Description: ${selectedProject.description}`, { x: 50, y: yPos, size: 12, font });

#     yPos -= 20;
#     page.drawText(`Created Date: ${new Date(selectedProject.created_at).toLocaleDateString()}`, {
#       x: 50, y: yPos, size: 12, font,
#     });

#     yPos -= 40;
#     page.drawText("Project Stages", { x: 50, y: yPos, size: 14, font, color: rgb(0.8, 0, 0) });

#     yPos -= 30;
#     stages.forEach((stage, index) => {
#       yPos -= 20;
#       page.drawText(`${index + 1}. ${stage.stage_name} - ${stage.status}`, { x: 50, y: yPos, size: 12, font });
#     });

#     const pdfBytes = await pdfDoc.save();
#     const pdfBlob = new Blob([pdfBytes], { type: "application/pdf" });
#     setPdfUrl(URL.createObjectURL(pdfBlob));
#     return pdfBlob;
#   };

#   const handleSendEmail = async () => {
#     if (selectedEmails.length === 0) {
#       alert("Please select at least one recipient.");
#       return;
#     }

#     const pdfBlob = await generatePDF();
#     if (!pdfBlob) return;

#     const formData = new FormData();
#     formData.append("emails", JSON.stringify(selectedEmails));
#     formData.append("pdf", pdfBlob, `project_${selectedProject.project_id}.pdf`);

#     try {
#       const res = await fetch("http://localhost:5000/projects/send-email", {
#         method: "POST",
#         body: formData,
#       });

#       const data = await res.json();
#       alert(data.success ? "Email sent successfully!" : "Failed to send email.");
#     } catch (err) {
#       console.error("Error sending email:", err);
#     }
#   };

#   return (
#     <div className="container mt-4">
#       <h3 className="text-center mb-3">Project List</h3>
#       <Form.Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} className="mb-3">
#         <option value="All">All</option>
#         <option value="Pending">Pending</option>
#         <option value="Ongoing">Ongoing</option>
#         <option value="Completed">Completed</option>
#       </Form.Select>

#       <Table bordered striped hover className="text-center">
#         <thead className="table-dark">
#           <tr>
#             <th>#</th>
#             <th>Project Name</th>
#             <th>Created Date</th>
#             <th>Status</th>
#           </tr>
#         </thead>
#         <tbody>
#           {projects
#             .filter((proj) => statusFilter === "All" || proj.status === statusFilter)
#             .map((project, index) => (
#               <tr key={project.project_id} onClick={() => handleProjectClick(project)} style={{ cursor: "pointer" }}>
#                 <td>{index + 1}</td>
#                 <td>{project.project_name}</td>
#                 <td>{new Date(project.created_at).toLocaleDateString()}</td>
#                 <td>{project.status}</td>
#               </tr>
#             ))}
#         </tbody>
#       </Table>

#       <Modal show={showDetailsModal} onHide={() => setShowDetailsModal(false)}>
#         <Modal.Header closeButton>
#           <Modal.Title>{selectedProject?.project_name}</Modal.Title>
#         </Modal.Header>
#         <Modal.Body>
#           <p><strong>Description:</strong> {selectedProject?.description}</p>
#           {pdfUrl && <iframe src={pdfUrl} width="100%" height="400px" title="PDF Preview"></iframe>}
#           {emails.map((email) => (
#   <Form.Check 
#   key={email.id} 
#   label={email.email} 
#   checked={selectedEmails.includes(email.email)} 
#   onChange={() => handleEmailSelect(email.email)} 
# />


# ))}

#         </Modal.Body>
#         <Modal.Footer>
#           <Button variant="secondary" onClick={generatePDF}>Generate PDF</Button>
#           <Button variant="primary" onClick={handleSendEmail}>Send PDF via Email</Button>
#         </Modal.Footer>
#       </Modal>
#     </div>
#   );
# };

# export default ShareProject;










# // import React, { useState, useEffect } from "react";
# // import { Table, Button, Modal, Form } from "react-bootstrap";
# // import { PDFDocument, rgb } from "pdf-lib";
# // import { saveAs } from "file-saver";

# // const ShareProject = () => {
# //   const [projects, setProjects] = useState([]);
# //   const [selectedProject, setSelectedProject] = useState(null);
# //   const [stages, setStages] = useState([]);
# //   const [statusFilter, setStatusFilter] = useState("All");
# //   const [showDetailsModal, setShowDetailsModal] = useState(false);
# //   const [pdfUrl, setPdfUrl] = useState(null);
# //   const [emails, setEmails] = useState(["", "", ""]); // Array to store three emails

# //   useEffect(() => {
# //     fetchProjects();
# //   }, []);

# //   // Fetch all projects
# //   const fetchProjects = async () => {
# //     try {
# //       const res = await fetch("http://localhost:5000/projects/all-projects");
# //       const data = await res.json();
# //       setProjects(data);
# //     } catch (err) {
# //       console.error("Error fetching projects:", err);
# //     }
# //   };

# //   // Fetch project details and stages
# //   const handleProjectClick = async (project) => {
# //     setSelectedProject(project);
# //     try {
# //       const res = await fetch(`http://localhost:5000/projects/${project.project_id}/stages`);
# //       const data = await res.json();
# //       setStages(data);
# //     } catch (err) {
# //       console.error("Error fetching project stages:", err);
# //     }
# //     setShowDetailsModal(true);
# //     setPdfUrl(null); // Reset PDF when opening a new project
# //   };

# //   // Generate PDF in the frontend
# //   const generatePDF = async () => {
# //     if (!selectedProject) {
# //       alert("No project selected!");
# //       return;
# //     }
  
# //     try {
# //       const pdfDoc = await PDFDocument.create();
# //       let page = pdfDoc.addPage([600, 800]); // A4 Size
# //       const { height } = page.getSize();
# //       const fontSize = 12;
# //       let yPos = height - 50;
  
# //       // Project Title
# //       page.drawText(`Project: ${selectedProject.project_name}`, { x: 50, y: yPos, size: 18, color: rgb(0, 0, 1) });
# //       yPos -= 25;
  
# //       // Project Description
# //       page.drawText(`Description: ${selectedProject.description || "N/A"}`, { x: 50, y: yPos, size: fontSize });
# //       yPos -= 20;
  
# //       // Created Date
# //       page.drawText(`Created Date: ${new Date(selectedProject.created_at).toLocaleDateString()}`, { x: 50, y: yPos, size: fontSize });
# //       yPos -= 30;
  
# //       // Table Headers
# //       const columnPositions = { index: 50, name: 70, description: 250, startDate: 400, endDate: 480, status: 550 };
  
# //       page.drawText("#", { x: columnPositions.index, y: yPos, size: fontSize, color: rgb(1, 0, 0) });
# //       page.drawText("Stage Name", { x: columnPositions.name, y: yPos, size: fontSize, color: rgb(1, 0, 0) });
# //       page.drawText("Description", { x: columnPositions.description, y: yPos, size: fontSize, color: rgb(1, 0, 0) });
# //       page.drawText("Start Date", { x: columnPositions.startDate, y: yPos, size: fontSize, color: rgb(1, 0, 0) });
# //       page.drawText("End Date", { x: columnPositions.endDate, y: yPos, size: fontSize, color: rgb(1, 0, 0) });
# //       page.drawText("Status", { x: columnPositions.status, y: yPos, size: fontSize, color: rgb(1, 0, 0) });
  
# //       yPos -= 20;
  
# //       if (!stages || stages.length === 0) {
# //         page.drawText("No stages available", { x: 50, y: yPos, size: fontSize });
# //       } else {
# //         // Sort Stages by Start Date & Add to PDF
# //         stages
# //           .sort((a, b) => new Date(a.start_date) - new Date(b.start_date))
# //           .forEach((stage, index) => {
# //             if (yPos < 50) { // Create a new page if needed
# //               page = pdfDoc.addPage([600, 800]);
# //               yPos = height - 50;
# //             }
  
# //             page.drawText(`${index + 1}`, { x: columnPositions.index, y: yPos, size: fontSize });
# //             page.drawText(stage.stage_name || "N/A", { x: columnPositions.name, y: yPos, size: fontSize });
# //             page.drawText(stage.description || "N/A", { x: columnPositions.description, y: yPos, size: fontSize });
# //             page.drawText(stage.start_date ? new Date(stage.start_date).toLocaleDateString() : "N/A", { x: columnPositions.startDate, y: yPos, size: fontSize });
# //             page.drawText(stage.end_date ? new Date(stage.end_date).toLocaleDateString() : "N/A", { x: columnPositions.endDate, y: yPos, size: fontSize });
# //             page.drawText(stage.status || "N/A", { x: columnPositions.status, y: yPos, size: fontSize });
  
# //             yPos -= 20;
# //           });
# //       }
  
# //       const pdfBytes = await pdfDoc.save();
# //       const pdfBlob = new Blob([pdfBytes], { type: "application/pdf" });
  
# //       // âœ… Set PDF preview in the frontend
# //       const pdfUrl = URL.createObjectURL(pdfBlob);
# //       setPdfUrl(pdfUrl); // <-- Store URL in state
  
# //       // Use FileSaver.js to download the PDF
# //     //   saveAs(pdfBlob, `Project_${selectedProject.project_id}.pdf`);
# //     } catch (error) {
# //       console.error("Error generating PDF:", error);
# //     }
# //   };
  
  
  
  
  
  

# //   // Handle email input change
# //   const handleEmailChange = (index, value) => {
# //     const newEmails = [...emails];
# //     newEmails[index] = value;
# //     setEmails(newEmails);
# //   };

# //   // Send PDF to backend for emailing
# //   const handleSendEmail = async () => {
# //     if (!emails[0] || !emails[1] || !emails[2]) {
# //       alert("Please enter all three email addresses!");
# //       return;
# //     }

# //     const pdfBlob = await generatePDF();
# //     if (!pdfBlob) return;

# //     const formData = new FormData();
# //     formData.append("emails", JSON.stringify(emails)); // Send as JSON string
# //     formData.append("pdf", pdfBlob, `project_${selectedProject.project_id}.pdf`);

# //     try {
# //       const res = await fetch("http://localhost:5000/projects/send-email", {
# //         method: "POST",
# //         body: formData,
# //       });

# //       const data = await res.json();
# //       if (data.success) {
# //         alert("Email sent successfully to all recipients!");
# //       } else {
# //         alert("Failed to send email.");
# //       }
# //     } catch (err) {
# //       console.error("Error sending email:", err);
# //     }
# //   };

# //   return (
# //     <div className="container mt-4">
# //       <h3 className="text-center mb-3">Project List</h3>

# //       {/* Status Filter Dropdown */}
# //       <Form.Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} className="mb-3">
# //         <option value="All">All</option>
# //         <option value="Pending">Pending</option>
# //         <option value="Ongoing">Ongoing</option>
# //         <option value="Completed">Completed</option>
# //       </Form.Select>

# //       {/* Projects Table */}
# //       <Table bordered striped hover className="text-center">
# //         <thead className="table-dark">
# //           <tr>
# //             <th>#</th>
# //             <th>Project Name</th>
# //             <th>Created Date</th>
# //             <th>Status</th>
# //           </tr>
# //         </thead>
# //         <tbody>
# //           {projects
# //             .filter((proj) => statusFilter === "All" || proj.status === statusFilter)
# //             .map((project, index) => (
# //               <tr key={project.project_id} onClick={() => handleProjectClick(project)} style={{ cursor: "pointer" }}>
# //                 <td>{index + 1}</td>
# //                 <td>{project.project_name}</td>
# //                 <td>{new Date(project.created_at).toLocaleDateString()}</td>
# //                 <td>{project.status}</td>
# //               </tr>
# //             ))}
# //         </tbody>
# //       </Table>

# //       {/* Project Details Full-Screen Modal */}
# // <Modal show={showDetailsModal} onHide={() => setShowDetailsModal(false)} fullscreen>
# //   <Modal.Header closeButton>
# //     <Modal.Title className="w-100 text-center">{selectedProject?.project_name}</Modal.Title>
# //   </Modal.Header>
# //   <Modal.Body>
# //     <p><strong>Description:</strong> {selectedProject?.description}</p>

# //     {/* Stages Table */}
# //     <Table bordered striped className="w-100 text-center">
# //       <thead className="table-dark">
# //         <tr>
# //           <th>#</th>
# //           <th>Stage Name</th>
# //           <th>Description</th>
# //           <th>Start Date</th>
# //           <th>End Date</th>
# //           <th>Status</th>
# //         </tr>
# //       </thead>
# //       <tbody>
# //         {stages
# //           .sort((a, b) => new Date(a.start_date) - new Date(b.start_date)) // Sorting by Start Date
# //           .map((stage, index) => (
# //             <tr key={stage.stage_id}>
# //               <td>{index + 1}</td>
# //               <td>{stage.stage_name}</td>
# //               <td>{stage.description || "N/A"}</td>
# //               <td>{stage.start_date ? new Date(stage.start_date).toLocaleDateString() : "N/A"}</td>
# //               <td>{stage.end_date ? new Date(stage.end_date).toLocaleDateString() : "N/A"}</td>
# //               <td>{stage.status}</td>
# //             </tr>
# //           ))}
# //       </tbody>
# //     </Table>

# //     {/* PDF Preview */}
# //     {pdfUrl && (
# //       <iframe src={pdfUrl} width="100%" height="500px" title="PDF Preview"></iframe>
# //     )}
# //   </Modal.Body>
# //   <Modal.Footer className="d-flex flex-column">
# //     {emails.map((email, index) => (
# //       <Form.Control
# //         key={index}
# //         type="email"
# //         placeholder={`Enter recipient's email ${index + 1}`}
# //         value={email}
# //         onChange={(e) => handleEmailChange(index, e.target.value)}
# //         className="mb-2 w-50"
# //       />
# //     ))}
# //     <div className="d-flex gap-2">
# //       <Button variant="secondary" onClick={generatePDF}>Generate PDF</Button>
# //       <Button variant="primary" onClick={handleSendEmail}>Send PDF via Email</Button>
# //     </div>
# //   </Modal.Footer>
# // </Modal>

# //     </div>
# //   );
# // };

# // export default ShareProject;
